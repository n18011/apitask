{"version":3,"sources":["../../../../../../vagrant/apitask/src/App.js","../../../../../../vagrant/apitask/src/serviceWorker.js","../../../../../../vagrant/apitask/src/index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadedJSON","err","res","setState","shipName","body","getWoWsShipId","params","application_id","language","nation","state","nationValue","type","typeValue","request","get","query","end","nationItems","typeItems","_this2","nationOptions","map","i","react_default","a","createElement","value","key","typeOptions","FormOption","className","onSubmit","e","doSubmit","onChange","doChangeNation","doChangeType","Header","Footer","keys","data","name","replace","src","images","small","alt","description","target","preventDefault","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b7b98a1.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport request from 'superagent'\nimport './App.css'\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      shipName: null,\n      nation: '',\n      type: '',\n      nationValue: 'JAPAN',\n      typeValue: 'Destroyer',\n      nationItems: ['JAPAN', 'UK', 'GERMANY', 'USA', 'USSR', 'FRANCE', 'ITALY', 'PAN_ASIA'],\n      typeItems: ['Destroyer', 'Cruiser', 'AirCarrier', 'Battleship']\n    }\n  }\n  loadedJSON = (err, res) => this.setState({shipName: res.body})\n  getWoWsShipId = () => {\n    const URL = 'https://api.worldofwarships.asia/wows/encyclopedia/ships/'\n    const KEY = '020626a4031ad5b7e8ceb1a5a26da6a8'\n    const params = {\n      application_id: KEY,\n      language: 'ja',\n      nation: this.state.nationValue,\n      type: this.state.typeValue\n    }\n    request.get(URL)\n    .query(params)\n      .end(this.loadedJSON)\n  }\n  componentWillMount () {\n    this.getWoWsShipId()\n  }\n  render () {\n    const nationOptions = this.state.nationItems.map(i => {\n      return (\n        <option value={i} key={i}>{i}</option>\n      )\n    })\n    const typeOptions = this.state.typeItems.map(i => {\n      return (\n        <option value={i} key={i}>{i}</option>\n      )\n    })\n    const FormOption = () => {\n    return (\n      <div className='form'>\n        <form onSubmit={e => this.doSubmit(e)}>\n          国名：\n          <select\n            className='nation'\n            value={this.state.nationValue}\n            onChange={e => this.doChangeNation(e)}>\n            {nationOptions}\n          </select>\n          艦種：\n          <select\n            className='type'\n            value={this.state.typeValue}\n            onChange={e => this.doChangeType(e)}>\n            {typeOptions}\n          </select>\n          <input type='submit' value='search' className='submit'/>\n        </form>\n      </div>\n    )\n    }\n    const Header = () => {\n      return (\n        <div className=\"head\">\n          <h1>World of Warships  playable ships</h1>\n        </div>\n      )\n    }\n    const Footer = () => {\n      return (\n        <div className=\"copyright\">\n        <p>Copyright &copy;</p>\n        </div>\n      )\n    }\n    if (!this.state.shipName) {\n      return (\n        <div className=\"App\">\n          <Header />\n          <FormOption />\n          <Footer />\n        </div>\n      )\n    }\n    const name = Object.keys(this.state.shipName.data)\n    const shipName = name.map((value) => {\n      return (\n          <li key={value}>\n            <h2>{this.state.shipName.data[value].name.replace(/\\[|\\]/g, '')}\n          <img src={this.state.shipName.data[value].images.small} alt={value} />\n        </h2>\n        <p>{this.state.shipName.data[value].description}</p>\n          </li>\n      )\n    })\n    return (\n      <div className='App'>\n        <Header />\n        <FormOption />\n        <div className=\"main\">\n          <ul>\n            {shipName}\n          </ul>\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n  doChangeNation (e) {\n    this.setState({ nationValue: e.target.value })\n  }\n  doChangeType (e) {\n    this.setState({ typeValue: e.target.value })\n  }\n  doSubmit (e) {\n    this.getWoWsShipId()\n    e.preventDefault()\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}